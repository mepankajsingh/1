---
import Layout from '../../layouts/Layout.astro';
import LibraryCard from '../../components/LibraryCard.astro';
import SortingControl from '../../components/SortingControl.jsx';
import FilterComponent from '../../components/FilterComponent.jsx';
import { supabase } from '../../lib/supabase';

export const prerender = false;

// Get all libraries with their frameworks and labels
const { data: libraries } = await supabase
  .from('libraries')
  .select(`
    *,
    frameworks:library_frameworks(
      is_primary,
      framework_id(id, name, slug)
    ),
    tags:library_tags(tag_id(id, name, slug)),
    labels:library_labels(
      label_id(id, name, color, text_color)
    )
  `)
  .order('name');

// Get all frameworks for the filter
const { data: frameworks } = await supabase
  .from('frameworks')
  .select('id, name, slug')
  .order('name');

// Get all tags for the filter
const { data: tags } = await supabase
  .from('tags')
  .select('id, name, slug')
  .order('name');
---

<Layout title="Find UI Libraries for Your Project">
  <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
    <div class="mb-8">
      <h1 class="text-2xl font-bold text-gray-900 mb-2">UI Libraries</h1>
      <p class="text-gray-600">
        Discover the best UI libraries for your next project.
      </p>
    </div>

    <div class="lg:flex gap-6">
      <!-- Filters sidebar -->
      <div class="lg:w-64 flex-shrink-0 mb-6 lg:mb-0">
        <FilterComponent frameworks={frameworks} client:load />
      </div>

      <!-- Main content -->
      <div class="flex-1">
        <!-- Sorting controls -->
        <div class="mb-6">
          <SortingControl client:load />
        </div>

        <!-- Library grid -->
        <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-3 xl:grid-cols-4 gap-4 library-grid">
          {libraries && libraries.map(library => (
            <LibraryCard 
              library={library} 
              data-stars={library.github_stars || 0}
              data-updated={library.last_update || ''}
              data-components={library.total_components || 0}
              data-downloads={library.npm_downloads || 0}
              data-forks={library.github_forks || 0}
              data-framework={library.frameworks?.find(fw => fw.is_primary)?.framework_id?.slug || ''}
              data-theme={library.styling || ''}
              data-pricing={library.pricing || ''}
            />
          ))}
        </div>

        {(!libraries || libraries.length === 0) && (
          <div class="text-center py-12">
            <p class="text-gray-500">No libraries found.</p>
          </div>
        )}
      </div>
    </div>
  </main>
</Layout>

<script>
  // Client-side filtering and sorting logic
  document.addEventListener('DOMContentLoaded', () => {
    // Store original cards for reset purposes
    const libraryGrid = document.querySelector('.library-grid');
    if (!libraryGrid) return;
    
    const originalCards = Array.from(libraryGrid.children);
    let libraryCards = [...originalCards];
    
    // Current state
    let currentFilters = {
      framework: '',
      theme: '',
      pricing: '',
      stars: ''
    };
    let currentSort = 'popular';
    
    // Apply filters and sorting
    function applyFiltersAndSort() {
      console.log('Applying filters:', currentFilters);
      console.log('Current sort:', currentSort);
      
      // Always start with original cards
      libraryCards = [...originalCards];
      
      // Apply framework filter
      if (currentFilters.framework) {
        libraryCards = libraryCards.filter(card => {
          const cardFramework = card.getAttribute('data-framework');
          console.log('Card framework:', cardFramework, 'Filter:', currentFilters.framework);
          return cardFramework === currentFilters.framework;
        });
      }
      
      // Apply theme filter
      if (currentFilters.theme) {
        libraryCards = libraryCards.filter(card => {
          const cardTheme = card.getAttribute('data-theme');
          console.log('Card theme:', cardTheme, 'Filter:', currentFilters.theme);
          return cardTheme === currentFilters.theme;
        });
      }
      
      // Apply pricing filter
      if (currentFilters.pricing) {
        libraryCards = libraryCards.filter(card => {
          const cardPricing = card.getAttribute('data-pricing');
          console.log('Card pricing:', cardPricing, 'Filter:', currentFilters.pricing);
          return cardPricing === currentFilters.pricing;
        });
      }
      
      // Apply stars filter
      if (currentFilters.stars) {
        libraryCards = libraryCards.filter(card => {
          const stars = parseInt(card.getAttribute('data-stars') || '0', 10);
          const minStars = parseInt(currentFilters.stars, 10);
          console.log('Card stars:', stars, 'Min stars:', minStars);
          return stars >= minStars;
        });
      }
      
      // Apply sorting
      libraryCards.sort((a, b) => {
        switch (currentSort) {
          case 'latest':
            return new Date(b.getAttribute('data-updated') || 0) - new Date(a.getAttribute('data-updated') || 0);
          case 'components':
            return (parseInt(b.getAttribute('data-components') || '0', 10) - parseInt(a.getAttribute('data-components') || '0', 10));
          case 'downloads':
            return (parseInt(b.getAttribute('data-downloads') || '0', 10) - parseInt(a.getAttribute('data-downloads') || '0', 10));
          case 'forks':
            return (parseInt(b.getAttribute('data-forks') || '0', 10) - parseInt(a.getAttribute('data-forks') || '0', 10));
          case 'popular':
          default:
            return (parseInt(b.getAttribute('data-stars') || '0', 10) - parseInt(a.getAttribute('data-stars') || '0', 10));
        }
      });
      
      console.log('Filtered cards count:', libraryCards.length);
      
      // Clear the grid
      while (libraryGrid.firstChild) {
        libraryGrid.removeChild(libraryGrid.firstChild);
      }
      
      // Add filtered and sorted cards back to the grid
      if (libraryCards.length > 0) {
        libraryCards.forEach(card => {
          libraryGrid.appendChild(card.cloneNode(true));
        });
      } else {
        // Show "no results" message if needed
        const noResults = document.createElement('div');
        noResults.className = 'text-center py-12 col-span-full';
        noResults.innerHTML = '<p class="text-gray-500">No libraries match your filters.</p>';
        libraryGrid.appendChild(noResults);
      }
    }
    
    // Listen for filter changes
    document.addEventListener('filterChange', (event) => {
      console.log('Filter change event received:', event.detail);
      currentFilters = event.detail.filters;
      applyFiltersAndSort();
    });
    
    // Listen for sort changes
    document.addEventListener('sortChange', (event) => {
      console.log('Sort change event received:', event.detail);
      currentSort = event.detail.sortBy;
      applyFiltersAndSort();
    });
  });
</script>
