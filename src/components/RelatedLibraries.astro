---
import LibraryCard from './LibraryCard.astro';
import { supabase } from '../lib/supabase';

interface Props {
  currentLibraryId: string;
  frameworkId: string;
  limit?: number;
}

const { currentLibraryId, frameworkId, limit = 3 } = Astro.props;

// Get related libraries that share the same framework, ordered by downloads, last_update
const { data: relatedLibraries } = await supabase
  .from('library_frameworks')
  .select(`
    library_id,
    libraries:library_id(
      *,
      frameworks:library_frameworks(
        is_primary,
        framework_id(id, name, slug)
      )
    )
  `)
  .eq('framework_id', frameworkId)
  .neq('library_id', currentLibraryId)
  .order('libraries(npm_downloads)', { ascending: false })
  .order('libraries(last_update)', { ascending: false })
  .limit(limit);

// Extract the actual library objects and filter out any nulls
const libraries = relatedLibraries
  ? relatedLibraries
      .map(item => item.libraries)
      .filter(library => library !== null)
  : [];
---

{libraries.length > 0 && (
  <div class="mt-8">
    <h2 class="text-lg font-medium text-gray-900 mb-4">Related Libraries</h2>
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
      {libraries.map(library => (
        <LibraryCard library={library} />
      ))}
    </div>
  </div>
)}
