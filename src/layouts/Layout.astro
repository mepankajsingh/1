---
import Navigation from '../components/Navigation.astro';

interface Props {
	title: string;
	description?: string;
}

const { title, description = "A simple hello page with dynamic content from Supabase" } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content={description} />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<link rel="stylesheet" href="/nprogress.css" />
		<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
	</head>
	<body class="bg-gray-50 text-gray-900">
		<Navigation />
		<div id="app">
			<slot />
		</div>
		<script>
			// Import NProgress
			import NProgress from 'nprogress';
			
			// Configure NProgress
			NProgress.configure({ 
				showSpinner: false,
				minimum: 0.1,
				easing: 'ease',
				speed: 500
			});

			// Simple client-side router for SPA behavior
			document.addEventListener('DOMContentLoaded', () => {
				document.body.addEventListener('click', (e) => {
					const target = e.target as HTMLElement;
					const anchor = target.closest('a');
					
					if (anchor && anchor.href && anchor.href.startsWith(window.location.origin) && !anchor.dataset.external) {
						e.preventDefault();
						const url = new URL(anchor.href);
						navigateTo(url.pathname);
					}
				});
			});

			// Handle browser back/forward navigation
			window.addEventListener('popstate', (e) => {
				if (e.state && e.state.path) {
					updateContent(e.state.path, false);
				}
			});

			async function navigateTo(path) {
				// Update browser history
				window.history.pushState({ path }, '', path);
				await updateContent(path);
			}

			async function updateContent(path, updateScroll = true) {
				try {
					// Start loading indicators
					NProgress.start();
					
					// Show skeleton loader
					const appElement = document.querySelector('#app');
					const originalContent = appElement.innerHTML;
					
					// Insert skeleton loader
					appElement.innerHTML = `
						<main class="mx-auto p-6 max-w-3xl">
							<div class="animate-pulse">
								<div class="h-8 w-3/4 mx-auto bg-gray-200 rounded mb-6"></div>
								<div class="space-y-4 border border-gray-200 bg-white p-6 rounded-lg">
									<div class="h-4 bg-gray-200 rounded w-full"></div>
									<div class="h-4 bg-gray-200 rounded w-5/6"></div>
									<div class="h-4 bg-gray-200 rounded w-4/6"></div>
								</div>
							</div>
						</main>
					`;
					
					// Fetch the HTML content of the new page
					const response = await fetch(path);
					const html = await response.text();
					
					// Create a temporary element to parse the HTML
					const parser = new DOMParser();
					const doc = parser.parseFromString(html, 'text/html');
					
					// Extract the main content
					const newContent = doc.querySelector('#app')?.innerHTML;
					const newTitle = doc.querySelector('title')?.textContent;
					
					if (newContent) {
						// Small delay to show the skeleton for at least a moment
						setTimeout(() => {
							document.querySelector('#app').innerHTML = newContent;
							if (newTitle) document.title = newTitle;
							if (updateScroll) window.scrollTo(0, 0);
							
							// Complete the loading
							NProgress.done();
						}, 300);
					} else {
						// If no content found, restore original
						appElement.innerHTML = originalContent;
						NProgress.done();
					}
				} catch (error) {
					console.error('Navigation error:', error);
					NProgress.done();
				}
			}
		</script>
	</body>
</html>
<style is:global>
	:root {
		--accent: 99, 102, 241;
		--accent-light: 129, 140, 248;
		--accent-dark: 79, 70, 229;
		--nprogress-color: #6366f1;
	}
	html {
		font-family: 'Inter', system-ui, sans-serif;
	}
	code {
		font-family: 'SF Mono', Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace;
		background-color: #f1f5f9;
		padding: 0.1em 0.3em;
		border-radius: 0.25rem;
		font-size: 0.9em;
	}
	
	/* Animation for skeleton loading */
	@keyframes pulse {
		0%, 100% {
			opacity: 0.5;
		}
		50% {
			opacity: 0.8;
		}
	}
	.animate-pulse {
		animation: pulse 1.5s cubic-bezier(0.4, 0, 0.6, 1) infinite;
	}

	/* Override NProgress color */
	#nprogress .bar {
		background: var(--nprogress-color) !important;
	}
	
	#nprogress .peg {
		box-shadow: 0 0 10px var(--nprogress-color), 0 0 5px var(--nprogress-color) !important;
	}
	
	/* Developer-friendly styles */
	pre {
		background-color: #1e293b;
		color: #e2e8f0;
		padding: 1rem;
		border-radius: 0.5rem;
		overflow-x: auto;
		margin: 1rem 0;
		font-size: 0.9rem;
		line-height: 1.5;
	}
	
	.tag {
		font-size: 0.75rem;
	}
	
	.stats-value {
		font-weight: 600;
	}
	
	.code-block {
		position: relative;
	}
	
	.code-block-header {
		background-color: #334155;
		color: #e2e8f0;
		padding: 0.5rem 1rem;
		border-top-left-radius: 0.5rem;
		border-top-right-radius: 0.5rem;
		font-family: 'SF Mono', Menlo, Monaco, monospace;
		font-size: 0.8rem;
		display: flex;
		justify-content: space-between;
	}
	
	.code-block pre {
		margin-top: 0;
		border-top-left-radius: 0;
		border-top-right-radius: 0;
	}
</style>
