---
import Navigation from '../components/Navigation.astro';
import LoadingBar from '../components/LoadingBar.jsx';

interface Props {
	title: string;
	description?: string;
}

const { title, description = "A simple hello page with dynamic content from Supabase" } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content={description} />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body class="bg-[#13151a] text-white">
		<LoadingBar client:load />
		<Navigation />
		<div id="app">
			<slot />
		</div>
		<script>
			// Simple client-side router for SPA behavior
			document.addEventListener('DOMContentLoaded', () => {
				document.body.addEventListener('click', (e) => {
					const target = e.target as HTMLElement;
					const anchor = target.closest('a');
					
					if (anchor && anchor.href && anchor.href.startsWith(window.location.origin) && !anchor.dataset.external) {
						e.preventDefault();
						const url = new URL(anchor.href);
						navigateTo(url.pathname);
					}
				});
			});

			// Handle browser back/forward navigation
			window.addEventListener('popstate', (e) => {
				if (e.state && e.state.path) {
					updateContent(e.state.path, false);
				}
			});

			async function navigateTo(path) {
				// Update browser history
				window.history.pushState({ path }, '', path);
				await updateContent(path);
			}

			async function updateContent(path, updateScroll = true) {
				try {
					// Dispatch navigation start event for loading bar
					window.dispatchEvent(new Event('navigationStart'));
					
					// Show skeleton loader
					const appElement = document.querySelector('#app');
					const originalContent = appElement.innerHTML;
					appElement.innerHTML = `
						<main class="mx-auto p-6 max-w-3xl">
							<div class="animate-pulse">
								<div class="h-12 w-3/4 mx-auto bg-accent-dark/50 rounded mb-8"></div>
								<div class="space-y-4 border border-accent-light/25 bg-gradient-to-b from-accent-dark/66 to-accent-dark/33 p-6 rounded-lg">
									<div class="h-4 bg-accent-dark/50 rounded w-full"></div>
									<div class="h-4 bg-accent-dark/50 rounded w-5/6"></div>
									<div class="h-4 bg-accent-dark/50 rounded w-4/6"></div>
									<div class="h-4 bg-accent-dark/50 rounded w-full"></div>
									<div class="h-4 bg-accent-dark/50 rounded w-3/4"></div>
									<div class="h-4 bg-accent-dark/50 rounded w-5/6"></div>
								</div>
							</div>
						</main>
					`;
					
					// Fetch the HTML content of the new page
					const response = await fetch(path);
					const html = await response.text();
					
					// Create a temporary element to parse the HTML
					const parser = new DOMParser();
					const doc = parser.parseFromString(html, 'text/html');
					
					// Extract the main content
					const newContent = doc.querySelector('#app')?.innerHTML;
					const newTitle = doc.querySelector('title')?.textContent;
					
					if (newContent) {
						// Small delay to show the skeleton for at least a moment
						setTimeout(() => {
							document.querySelector('#app').innerHTML = newContent;
							if (newTitle) document.title = newTitle;
							if (updateScroll) window.scrollTo(0, 0);
							
							// Dispatch navigation end event for loading bar
							window.dispatchEvent(new Event('navigationEnd'));
						}, 300);
					} else {
						// If no content found, restore original
						appElement.innerHTML = originalContent;
						window.dispatchEvent(new Event('navigationEnd'));
					}
				} catch (error) {
					console.error('Navigation error:', error);
					// Dispatch navigation end event for loading bar
					window.dispatchEvent(new Event('navigationEnd'));
				}
			}
		</script>
	</body>
</html>
<style is:global>
	:root {
		--accent: 136, 58, 234;
		--accent-light: 224, 204, 250;
		--accent-dark: 49, 10, 101;
		--accent-gradient: linear-gradient(
			45deg,
			rgb(var(--accent)),
			rgb(var(--accent-light)) 30%,
			white 60%
		);
	}
	code {
		font-family:
			Menlo,
			Monaco,
			Lucida Console,
			Liberation Mono,
			DejaVu Sans Mono,
			Bitstream Vera Sans Mono,
			Courier New,
			monospace;
	}
	
	/* Add animation for skeleton loading */
	@keyframes pulse {
		0%, 100% {
			opacity: 0.5;
		}
		50% {
			opacity: 0.8;
		}
	}
	.animate-pulse {
		animation: pulse 1.5s cubic-bezier(0.4, 0, 0.6, 1) infinite;
	}
</style>
